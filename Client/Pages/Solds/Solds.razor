@page "/Solds"
@using Blazor.Client.Services.Interfaces
@using Blazor.Client.BlazorDTOs
@using Blazor.Client.Entities
@inject HttpClient Http
@inject IBlazorSoldsService BlazorSoldsService
@inject IBlazorProductsService BlazorProductsService


<MudGrid>
    <MudItem xs="6" sm="1">

    </MudItem>
    <MudItem xs="6" sm="3">
    </MudItem>
    <MudItem xs="6" sm="6">
        <h1>Solds</h1>
    </MudItem>
    <MudItem xs="6" sm="1">
    </MudItem>
    <MudItem xs="6" sm="1">

    </MudItem>

</MudGrid>


@if (solds == null)
{
<MudProgressCircular Color="Color.Default" Style="height:70px;width:70px;" Indeterminate="true" /> 
}

else
{

<MudTable Items="@solds" Hover="true" Filter="new Func<BlazorSoldsDTO, bool>(FilterFunc1)">
    <ToolBarContent>
        <MudText Typo="Typo.h6">List of Solds</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>

    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Price</MudTh>
        <MudTh>SellsDateTime</MudTh>
    </HeaderContent>

    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Price">@context.Price</MudTd>
        <MudTd DataLabel="SellsDateTime">@context.SellsDateTime</MudTd>
    </RowTemplate>
</MudTable>
}







@code { private IEnumerable<BlazorSoldsDTO> solds = new List<BlazorSoldsDTO>();
    private IEnumerable<BlazorProductDTO> products = new List<BlazorProductDTO>();

    private string searchString1 = "";

    public List<string> s = new List<string>();
    public ChartOptions Options = new ChartOptions();
    public float sum = 0;
    public float percentage;

    List<string> ProductNames = new List<string>();
    List<double> SellQuantity = new List<double>();

    public List<BarData> Bar = new List<BarData>();


    public List<ChartSeries> Series = new List<ChartSeries>();


    protected override async Task OnInitializedAsync()
    {
        solds = await BlazorSoldsService.GetSolds();
        products = await BlazorProductsService.GetProducts();

        sum = 0;
        for (int i = 0; i < products.Count(); i++)
        {
            ProductNames.Add(products.ElementAt(i).Name);
            SellQuantity.Add(products.ElementAt(i).Sells);
            sum += products.ElementAt(i).Sells;

            Bar.Add(new BarData() { Name = products.ElementAt(i).Name, Month = new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, Number = new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } });

        }


        for (int i = 0; i < solds.Count(); i++)
        {
            for (int j = 0; j < Bar.Count(); j++)
            {
                if (solds.ElementAt(i).Name == Bar.ElementAt(j).Name)
                {
                    Bar.ElementAt(j).Number[solds.ElementAt(i).SellsDateTime.Month - 1]++;
                }

            }
        }

        for (int i = 0; i < Bar.Count(); i++)
        {
            Series.Add(new ChartSeries() { Name = products.ElementAt(i).Name, Data = Bar.ElementAt(i).Number.Select(Convert.ToDouble).ToArray() });
        }



        StateHasChanged();
    }


    private int Index = -1; //default value cannot be 0 -> first selectedindex is 0.





    public string[] XAxisLabels = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };


    private bool FilterFunc1(BlazorSoldsDTO element) => FilterFunc(element, searchString1);

    private bool FilterFunc(BlazorSoldsDTO element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;      
        if ($"{element.SellsDateTime} {element.Name}".Contains(searchString))
            return true;
        return false;

    }

    }
