@page "/Product/{id:int}"
@using Blazor.Client.Services.Interfaces
@using Blazor.Client.BlazorDTOs
@inject HttpClient Http
@inject IBlazorProductsService BlazorProductsService
@inject NavigationManager NavigationManager

<h3>Product</h3>



@if (product == null)
{
    <span><em>Loading...</em></span> }

else
{

    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Price</th>
                <th>Location</th>
                <th>ShortDescription</th>
                <th>Sells</th>
                <th>CurrentQuantity</th>
            </tr>
        </thead>
        <tbody>
            <tr>

                <td>@product.Name</td>
                <td>@product.Price</td>
                <td>@product.Location</td>
                <td>@product.ShortDescription</td>
                <td>@product.Sells</td>
                <td>@product.CurrentQuantity</td>
            </tr>
        </tbody>
    </table>




    <button class="btn btn-success" @onclick="@(()=>EditProduct(product.Id))">Edit</button>
    <button class="btn btn-danger" @onclick="@(()=> DeleteProduct(product.Id))">Delete</button>
}






@code {
    [Parameter]
    public int Id { get; set; }

    BlazorProductDTO product;

    protected override async Task OnInitializedAsync()
    {
        product = await BlazorProductsService.GetProductById(Id);

    }

    void EditProduct(int id)
    {
        NavigationManager.NavigateTo($"/editProduct/{id}");
    }

    async Task DeleteProduct(int id)
    {
        var result = await BlazorProductsService.DeleteProduct(id);
        if (result) NavigationManager.NavigateTo($"/Products");
    }

    void ShowClient(int? id)
    {
        NavigationManager.NavigateTo($"/Product/{id}");
    }


}
