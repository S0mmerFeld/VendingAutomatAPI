@page "/Solds"
@using Automat.Client.Services.Interfaces
@using Automat.Client.BlazorDTOs
@using Automat.Client.Entities
@inject HttpClient Http
@inject IBlazorSoldsService BlazorSoldsService
@inject IBlazorProductsService BlazorProductsService


<MudGrid>
    <MudItem xs="6" sm="1">
        <MudIconButton Icon="@Icons.Material.Filled.AddCircle" Color="Color.Error" Title="Add" Size="Size.Large" />
    </MudItem>
    <MudItem xs="6" sm="3">
    </MudItem>
    <MudItem xs="6" sm="6">
        <h1>Solds</h1>
    </MudItem>
    <MudItem xs="6" sm="1">
    </MudItem>
    <MudItem xs="6" sm="1">
        <MudIconButton Icon="@Icons.Material.Filled.AddCircle" Color="Color.Error" Title="Add" Size="Size.Large" />
    </MudItem>

</MudGrid>


@if (solds == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Price</th>
                <th>PriceString</th>
                <th>Tax</th>
                <th>SellsDateTime</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var sold in solds)
            {
                <tr>
                    <td>@sold.Id</td>
                    <td>@sold.Name</td>
                    <td>@sold.Price</td>
                    <td>@sold.PriceString</td>
                    <td>@sold.Tax</td>
                    <td>@sold.SellsDateTime</td>
                </tr>
            }
        </tbody>
    </table>

    <MudGrid>
        <MudItem xs="6" sm="4">
        </MudItem>
        <MudItem xs="6" sm="6">
            @if (@Index != -1)
            {
                <MudText Typo="Typo.h6">Sold @ProductNames.ToArray()[Index], Quantity = @SellQuantity.ToArray()[Index] / @sum  it is @Math.Round(((@SellQuantity.ToArray()[Index]) * 100 / sum), 2) %</MudText>

            }
        </MudItem>
        <MudItem xs="6" sm="2">
        </MudItem>
    </MudGrid>



    <MudPaper Class="pa-4">
        <MudChart ChartType="ChartType.Pie" InputData="@SellQuantity.ToArray()" @bind-SelectedIndex="Index" InputLabels="@ProductNames.ToArray()" Width="300px" Height="300px" />
    </MudPaper>
    @if (@Index != -1)
    {
        <div>
            <MudChart ChartType="ChartType.Bar" ChartSeries="@Series" @bind-SelectedIndex="Index" XAxisLabels="@XAxisLabels" Width="100%" Height="350px"></MudChart>
        </div>
    }


}







@code {



    private IEnumerable<BlazorSoldsDTO> solds = new List<BlazorSoldsDTO>();
    private IEnumerable<BlazorProductDTO> products = new List<BlazorProductDTO>();

    public List<string> s = new List<string>();
    public ChartOptions Options = new ChartOptions();
    public float sum = 0;
    public float percentage;

    List<string> ProductNames = new List<string>();
    List<double> SellQuantity = new List<double>();

    public List<BarData> Bar = new List<BarData>();


    public List<ChartSeries> Series = new List<ChartSeries>();


    protected override async Task OnInitializedAsync()
    {
        solds = await BlazorSoldsService.GetSolds();
        products = await BlazorProductsService.GetProducts();

        sum = 0;
        for (int i = 0; i < products.Count(); i++)
        {
            ProductNames.Add(products.ElementAt(i).Name);
            SellQuantity.Add(products.ElementAt(i).Sells);
            sum += products.ElementAt(i).Sells;

            Bar.Add(new BarData() { Name = products.ElementAt(i).Name, Month = new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, Number = new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } });

        }


        for (int i = 0; i < solds.Count(); i++)
        {
            for (int j = 0; j < Bar.Count(); j++)
            {
                if (solds.ElementAt(i).Name == Bar.ElementAt(j).Name)
                {
                    Bar.ElementAt(j).Number[solds.ElementAt(i).SellsDateTime.Month - 1]++;
                }

            }
        }

        for (int i = 0; i < Bar.Count(); i++)
        {
            Series.Add(new ChartSeries() { Name = products.ElementAt(i).Name, Data = Bar.ElementAt(i).Number.Select(Convert.ToDouble).ToArray() });
        }



        StateHasChanged();
    }


    private int Index = -1; //default value cannot be 0 -> first selectedindex is 0.





    public string[] XAxisLabels = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };




}
