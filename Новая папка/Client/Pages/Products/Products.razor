@page "/Products"
@using Blazor.Client.Services.Interfaces
@using Blazor.Client.BlazorDTOs
@inject HttpClient Http
@inject IBlazorProductsService BlazorProductsService
@inject NavigationManager NavigationManager



<MudGrid>
    <MudItem xs="6" sm="1">
    </MudItem>
    <MudItem xs="6" sm="3">
    </MudItem>
    <MudItem xs="6" sm="6">
        <h1>Products</h1>
    </MudItem>
    <MudItem xs="6" sm="1">
    </MudItem>
    <MudItem xs="6" sm="1">
        <MudIconButton Icon="@Icons.Material.Filled.AddCircle" Color="Color.Error" Title="Add" @onclick="@CreateProduct" Size="Size.Large" />
    </MudItem>

</MudGrid>



@if (products == null)
{
<MudProgressCircular Color="Color.Default" Style="height:70px;width:70px;" Indeterminate="true" /> }
else
{

<MudTable Items="@products" Hover="true" Filter="new Func<BlazorProductDTO, bool>(FilterFunc1)">
    <ToolBarContent>
        <MudText Typo="Typo.h6">List of Products</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="@searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>

    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Price</MudTh>
        <MudTh>Location</MudTh>
        <MudTh>ShortDescription</MudTh>
        <MudTh>Sells</MudTh>
        <MudTh>CurrentQuantity</MudTh>
    </HeaderContent>

    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Name"  @onclick="@(() => ShowProduct (@context.Id))"><u>@context.Name</u></MudTd>
        <MudTd DataLabel="Price">@context.Price</MudTd>
        <MudTd DataLabel="Location">@context.Location</MudTd>
        <MudTd DataLabel="ShortDescription">@context.ShortDescription</MudTd>
        <MudTd DataLabel="Sells">@context.Sells</MudTd>
        <MudTd DataLabel="CurrentQuantity">@context.CurrentQuantity</MudTd>

    </RowTemplate>
</MudTable>


}



@code { private IEnumerable<BlazorProductDTO> products = new List<BlazorProductDTO>();

    protected override async Task OnInitializedAsync()
    {
        products = await BlazorProductsService.GetProducts();
    }


    void ShowProduct(int id)
    {
        NavigationManager.NavigateTo($"/Product/{id}");
    }

    void CreateProduct()
    {
        NavigationManager.NavigateTo("/createProduct");
    }


    private string searchString1 = "";

    private bool FilterFunc1(BlazorProductDTO element) => FilterFunc(element, searchString1);

    private bool FilterFunc(BlazorProductDTO element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Name.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Price.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Sells.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Name} {element.Sells}".Contains(searchString))
            return true;
        return false;




    }
}